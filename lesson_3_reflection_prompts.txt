When would you want to use a remote repository rather than keeping all your work local?

When you work with a team and need to share the project with others. When you want a sort of foolproof backup of
your project because it's kept on Github's servers. When you change computers a lot and can't have your work "physically"

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

If someone is commiting changes with bugs and they automatically transfer to you while you're either working on changes yourself
you might en up with bugs. You you have control on what goes in your computer or else it'd be easy to infect someone's computer.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks clones a repository onto your account on Github. Usefule when making changes to a project but you also reference where it
came from and allows you to make changes to a project whitout changing the author's project.
Clones allows you to copy a rep. Branches to expand the project so you can work on feature while someone works on some other
feature in a parallel fashion

What is the benefit of having a copy of the last known state of the remote stored locally?

working offline

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

I'd be easier to just learn Git and harder to find anything better. Or you could try and build a better way ? An easier way would be an AI capable of
understanding the code and who would take care of the files and make it easier to save, merge and make features or organize your work. Harder would be
trying to use a cloud service or sending files via messaging.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

When you're working on something that functions "separately" like new features and you don't want to break the code. Working 
master would be when you're looking to fix bugs in the code or improve on it for perfomance where you're kind of sure it won't break. I'd say working on branches is useful because it allows you to have a working code while you're trying out new features
and so you can test at will. Working on master allows you to move forward easily when you're debugging without the need of
a large set of branches for each change you make. It keeps things straight and simple.
